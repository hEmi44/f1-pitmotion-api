package pitmotion.env.services;

import lombok.AllArgsConstructor;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;
import pitmotion.env.configurations.ImportProperties;
import pitmotion.env.debug.Debug;
import pitmotion.env.entities.Championship;
import pitmotion.env.services.imports.*;

import java.util.List;

@Service
@AllArgsConstructor
@Profile("import")
public class GlobalImportService {

    private final ImportProperties importProperties;
    private final ChampionshipImportService championshipImportService;
    private final DriverImportService driverImportService;
    private final TeamImportService teamImportService;
    private final CircuitImportService circuitImportService;
    private final TeamSeasonImportService teamSeasonImportService;
    private final DriverSeasonImportService driverSeasonImportService;
    private final GrandPrixImportService grandPrixImportService;

    public void importAll() {
        Debug.logger().dump("‚û°Ô∏è Lancement de l'import complet");

        List<Championship> championships = championshipImportService.importChampionships();
        pause();
        Debug.logger().dump("‚úÖ Import des championnats termin√©");

        driverImportService.importDrivers();
        pause();
        Debug.logger().dump("‚úÖ Import des pilotes termin√©");

        teamImportService.importTeams();
        pause();
        Debug.logger().dump("‚úÖ Import des √©curies termin√©");

        for (Championship championship : championships) {
            Debug.logger().dump("‚û°Ô∏è Import des profils d'√©quipe pour " + championship.getYear());
            teamSeasonImportService.importForChampionship(championship);
            pause();

            Debug.logger().dump("‚û°Ô∏è Import des profils pilotes pour " + championship.getYear());
            driverSeasonImportService.importForChampionship(championship);
            pause();
        }
        Debug.logger().dump("‚úÖ Import des profils √©curie + pilote termin√©");

        circuitImportService.importCircuits();
        pause();
        Debug.logger().dump("‚úÖ Import des circuits termin√©");

        for (Championship championship : championships) {
            Debug.logger().dump("‚û°Ô∏è Import des Grands Prix pour " + championship.getYear());
            grandPrixImportService.importForChampionship(championship);
            pause();
        }

        Debug.logger().dump("üéØ Import global termin√© avec succ√®s");
    }

    public void importYear(int year) {
        Debug.logger().dump("‚û°Ô∏è Lancement de l'import pour l'ann√©e " + year);

        Championship championship = championshipImportService.importChampionships().stream()
            .filter(c -> c.getYear() == year)
            .findFirst()
            .orElseThrow(() -> new RuntimeException("Aucun championnat trouv√© pour l'ann√©e " + year));

        driverImportService.importDriversForYear(year);
        pause();
        Debug.logger().dump("‚úÖ Pilotes " + year + " termin√©");

        teamImportService.importTeamsForYear(year);
        pause();
        Debug.logger().dump("‚úÖ √âcuries " + year + " termin√©");

        Debug.logger().dump("‚û°Ô∏è Profils d'√©quipe pour " + year);
        teamSeasonImportService.importForChampionship(championship);
        pause();

        Debug.logger().dump("‚û°Ô∏è Profils pilotes pour " + year);
        driverSeasonImportService.importForChampionship(championship);
        pause();

        circuitImportService.importCircuits();
        pause();
        Debug.logger().dump("‚úÖ Circuits termin√©s (import global)");

        Debug.logger().dump("‚û°Ô∏è Import des Grands Prix pour " + year);
        grandPrixImportService.importForChampionship(championship);
        pause();

        Debug.logger().dump("üéØ Import termin√© pour l'ann√©e " + year);
    }

    private void pause() {
        try {
            Thread.sleep(importProperties.getDelayMs());
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}
